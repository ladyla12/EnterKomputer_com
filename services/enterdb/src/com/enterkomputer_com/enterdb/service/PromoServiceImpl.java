/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.enterkomputer_com.enterdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.enterkomputer_com.enterdb.Promo;


/**
 * ServiceImpl object for domain model class Promo.
 *
 * @see Promo
 */
@Service("enterdb.PromoService")
@Validated
public class PromoServiceImpl implements PromoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PromoServiceImpl.class);


    @Autowired
    @Qualifier("enterdb.PromoDao")
    private WMGenericDao<Promo, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Promo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "enterdbTransactionManager")
    @Override
    public Promo create(Promo promo) {
        LOGGER.debug("Creating a new Promo with information: {}", promo);

        Promo promoCreated = this.wmGenericDao.create(promo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(promoCreated);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public Promo getById(Integer promoId) {
        LOGGER.debug("Finding Promo by id: {}", promoId);
        return this.wmGenericDao.findById(promoId);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public Promo findById(Integer promoId) {
        LOGGER.debug("Finding Promo by id: {}", promoId);
        try {
            return this.wmGenericDao.findById(promoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Promo found with id: {}", promoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public List<Promo> findByMultipleIds(List<Integer> promoIds, boolean orderedReturn) {
        LOGGER.debug("Finding Promos by ids: {}", promoIds);

        return this.wmGenericDao.findByMultipleIds(promoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "enterdbTransactionManager")
    @Override
    public Promo update(Promo promo) {
        LOGGER.debug("Updating Promo with information: {}", promo);

        this.wmGenericDao.update(promo);
        this.wmGenericDao.refresh(promo);

        return promo;
    }

    @Transactional(value = "enterdbTransactionManager")
    @Override
    public Promo partialUpdate(Integer promoId, Map<String, Object>promoPatch) {
        LOGGER.debug("Partially Updating the Promo with id: {}", promoId);

        Promo promo = getById(promoId);

        try {
            ObjectReader promoReader = this.objectMapper.reader().forType(Promo.class).withValueToUpdate(promo);
            promo = promoReader.readValue(this.objectMapper.writeValueAsString(promoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", promoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        promo = update(promo);

        return promo;
    }

    @Transactional(value = "enterdbTransactionManager")
    @Override
    public Promo delete(Integer promoId) {
        LOGGER.debug("Deleting Promo with id: {}", promoId);
        Promo deleted = this.wmGenericDao.findById(promoId);
        if (deleted == null) {
            LOGGER.debug("No Promo found with id: {}", promoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Promo.class.getSimpleName(), promoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "enterdbTransactionManager")
    @Override
    public void delete(Promo promo) {
        LOGGER.debug("Deleting Promo with {}", promo);
        this.wmGenericDao.delete(promo);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public Page<Promo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Promos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public Page<Promo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Promos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service enterdb for table Promo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service enterdb for table Promo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "enterdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}